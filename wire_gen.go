// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/jym0818/webook/interactive/events"
	repository2 "github.com/jym0818/webook/interactive/repository"
	cache2 "github.com/jym0818/webook/interactive/repository/cache"
	dao2 "github.com/jym0818/webook/interactive/repository/dao"
	service2 "github.com/jym0818/webook/interactive/service"
	"github.com/jym0818/webook/internal/events/article"
	"github.com/jym0818/webook/internal/repository"
	"github.com/jym0818/webook/internal/repository/cache"
	"github.com/jym0818/webook/internal/repository/dao"
	"github.com/jym0818/webook/internal/service"
	"github.com/jym0818/webook/internal/web"
	"github.com/jym0818/webook/ioc"
)

// Injectors from wire.go:

func InitServer() *App {
	db := ioc.InitDB()
	userDAO := dao.NewuserDAO(db)
	cmdable := ioc.InitRedis()
	userCache := cache.NewuserCache(cmdable)
	userRepository := repository.NewuserRepository(userDAO, userCache)
	userService := service.NewuserService(userRepository)
	codeCache := cache.NewcodeCache(cmdable)
	codeRepository := repository.NewcodeRepository(codeCache)
	smsService := ioc.InitSMS(cmdable)
	codeService := service.NewcodeService(codeRepository, smsService)
	userHandler := web.NewUserHandler(userService, codeService, cmdable)
	v := ioc.InitMiddlware(cmdable)
	wechatService := ioc.InitWechat()
	config := ioc.InitWechatCfg()
	oAuth2WechatHandler := web.NewOAuth2WechatHandler(wechatService, userService, config)
	articleDAO := dao.NewarticleDAO(db)
	articleCache := cache.NewarticleCache(cmdable)
	articleRepository := repository.NewarticleRepository(articleDAO, articleCache, userRepository)
	client := ioc.InitKafka()
	syncProducer := ioc.InitKafkaProducer(client)
	producer := article.NewKafkaProducer(syncProducer)
	articleService := service.NewarticleService(articleRepository, producer)
	interactiveCache := cache2.NewinteractiveCache(cmdable)
	interactiveDAO := dao2.NewinteractiveDAO(db)
	interactiveRepository := repository2.NewinteractiveRepository(interactiveCache, interactiveDAO)
	interactiveService := service2.NewinteractiveService(interactiveRepository)
	articleHandler := web.NewArticleHandler(articleService, interactiveService)
	engine := ioc.InitWeb(userHandler, v, oAuth2WechatHandler, articleHandler)
	consumer := events.NewReadEventArticleConsumer(interactiveRepository, client)
	v2 := ioc.NewConsumers(consumer)
	rankingCache := cache.NewRankingRedisCache(cmdable)
	rankingLocalCache := cache.NewRankingLocalCache()
	rankingRepository := repository.NewCachedRankingRepository(rankingCache, rankingLocalCache)
	rankingService := service.NewBatchRankingService(articleService, interactiveService, rankingRepository)
	job := ioc.InitRankingJob(rankingService)
	cron := ioc.InitCronJob(job)
	app := &App{
		web:       engine,
		consumers: v2,
		cron:      cron,
	}
	return app
}

// wire.go:

var UserService = wire.NewSet(cache.NewuserCache, dao.NewuserDAO, repository.NewuserRepository, service.NewuserService)

var CodeService = wire.NewSet(cache.NewcodeCache, repository.NewcodeRepository, service.NewcodeService)

var ArticleService = wire.NewSet(dao.NewarticleDAO, cache.NewarticleCache, repository.NewarticleRepository, service.NewarticleService)

var InteractiveService = wire.NewSet(dao2.NewinteractiveDAO, cache2.NewinteractiveCache, repository2.NewinteractiveRepository, service2.NewinteractiveService)
